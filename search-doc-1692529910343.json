[{"title":"ClientDS0","type":0,"sectionRef":"#","url":"/DS0/api/ClientDS0","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientDS0","url":"/DS0/api/ClientDS0#functions","content":" "},{"title":"Values​","type":1,"pageTitle":"ClientDS0","url":"/DS0/api/ClientDS0#Values","content":"&lt;/&gt; ClientDS0.Values() → DS0SavedPlayer Returns all the player data  "},{"title":"Get​","type":1,"pageTitle":"ClientDS0","url":"/DS0/api/ClientDS0#Get","content":"&lt;/&gt; ClientDS0.Get(key: string) → any Returns the value of a key print(`Client has {DS0.Client.Get(&quot;Wins&quot;)} wins!`) Equivalent to: DS0.Client.Values()[key]   "},{"title":"OnKeyChanged​","type":1,"pageTitle":"ClientDS0","url":"/DS0/api/ClientDS0#OnKeyChanged","content":"&lt;/&gt; ClientDS0.OnKeyChanged( key: string, callback: DS0KeyChangedCallback ) → CallbackRemover Adds an event listener to call callback when key has changed. This listener is removed when the player leaves the game DS0.Client.OnKeyChanged(&quot;Wins&quot;, function(newValue) print(`Wins is now {newValue}!`) end)  "},{"title":"DS0","type":0,"sectionRef":"#","url":"/DS0/api/DS0","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#types","content":" "},{"title":"CallbackRemover​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#CallbackRemover","content":"&lt;/&gt; type CallbackRemover = () → () A function that when called will stop the callback from being called again  "},{"title":"DS0Default​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0Default","content":"&lt;/&gt; interface DS0Default { Value: any-- The default value of the key Ordered: boolean-- Whether the value will be saved in an OrderedDataStore Ephimeral: boolean-- Whether the value will be saved (false) or will reset (true) when the player leaves the game } A default for a key. Making this interface manually can be verbose so using DS0.Default is recommended.  "},{"title":"DS0Defaults​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0Defaults","content":"&lt;/&gt; type DS0Defaults = {[string]: DS0Default} A dictionary of a default for each key in a player's data. A player's data will contain each key in here. See ServerDS0.Init  "},{"title":"DS0SavedPlayer​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0SavedPlayer","content":"&lt;/&gt; type DS0SavedPlayer = {[string]: any} A dictionary of the values that are contained in the player  "},{"title":"DS0KeyChangedCallback​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0KeyChangedCallback","content":"&lt;/&gt; type DS0KeyChangedCallback = (newValue: any) → () Callback that receives a new value that has changed  "},{"title":"DS0SetCallback​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0SetCallback","content":"&lt;/&gt; type DS0SetCallback = (currentValue: any) → any Callback that receives the current value of the key and returns a new value for the key  "},{"title":"DS0SetTable​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DS0SetTable","content":"&lt;/&gt; type DS0SetTable = {[string]: any | DS0SetCallback} A dictionary for setting multiple keys in one function call, value is a Set method argument "},{"title":"Properties​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#properties","content":" "},{"title":"DataStoreName​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#DataStoreName","content":"This item only works when running on the server. Server This item is read only and cannot be modified. Read Only &lt;/&gt; DS0.DataStoreName: string | nil The name that will be used for getting the datastores, is nil on client.  "},{"title":"Client​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#Client","content":"This item only works when running on the client. Client &lt;/&gt; DS0.Client: ClientDS0 | nil Client functions for DS0, is nil on server  "},{"title":"Server​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#Server","content":"This item only works when running on the server. Server &lt;/&gt; DS0.Server: ServerDS0 | nil Server functions for DS0, is nil on client "},{"title":"Functions​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#functions","content":" "},{"title":"GetPlayerKey​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#GetPlayerKey","content":"&lt;/&gt; DS0.GetPlayerKey(Player: Player ) → () Returns the key of the player that will be saved on the datastores. Only useful if you're accessing the raw datastores  "},{"title":"Default​","type":1,"pageTitle":"DS0","url":"/DS0/api/DS0#Default","content":"&lt;/&gt; DS0.Default( value: any,-- The default value of the key ordered: boolean | nil,-- Whether the value will be saved in an OrderedDataStore. Defaults to false, will be false if value is not a number ephimeral: boolean | nil-- Whether the value will be saved (false) or will disappear (true) when the player leaves the game. Defaults to false ) → DS0Default Makes a DS0Default using the arguments provided "},{"title":"DS0Player","type":0,"sectionRef":"#","url":"/DS0/api/DS0Player","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#functions","content":" "},{"title":"Values​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#Values","content":"&lt;/&gt; DS0Player.Values() → DS0SavedPlayer Returns all the player data  "},{"title":"Get​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#Get","content":"&lt;/&gt; DS0Player.Get(key: string) → any Returns the value of a key print(`Player has {ds0Player.Get(&quot;Wins&quot;)} wins!`) Equivalent to: ds0Player.Values()[key]   "},{"title":"OnKeyChanged​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#OnKeyChanged","content":"&lt;/&gt; DS0Player.OnKeyChanged( key: string, callback: DS0KeyChangedCallback ) → CallbackRemover Adds an event listener to call callback when key has changed. This listener is removed when the player leaves the game ds0Player.OnKeyChanged(&quot;Wins&quot;, function(newValue) print(`Wins is now {newValue}!`) end)   "},{"title":"Set​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#Set","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DS0Player.Set( key: string | DS0SetTable, value: any | DS0SetCallback ) → () Sets key to value and replicates the change to the client. A change won't be triggered if the value is not a table and is the same as the previous one. For tables changes won't be compared to the previous value. If a function is provided as value, it will be called with the current value of key as the first argument, and key will be set to the return value. If a table is provided as the first argument, the second argument will be ignored andDS0Player.Set will be called for every element in the table with the key as key and the value as value. Simple set ds0Player.Set(&quot;Wins&quot;, 5) Set using function ds0Player.Set(&quot;Wins&quot;, function(currentValue) -- Increment the current value by 1 return currentValue + 1 end) Set using table ds0Player.Set({ Wins = function(currentValue) -- Increment the current value by 1 return currentValue + 1 end, InventoryItems = {&quot;Potion&quot;} })   "},{"title":"IsConnected​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#IsConnected","content":"&lt;/&gt; DS0Player.IsConnected() → boolean Returns true if the player is still in the game or hasn't been disconnected through DS0Player.Disconnect.  "},{"title":"Disconnect​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#Disconnect","content":"&lt;/&gt; DS0Player.Disconnect() → boolean Sets DS0Player.IsConnected to false. This function is automatically called when the player leaves the game  "},{"title":"IsLoaded​","type":1,"pageTitle":"DS0Player","url":"/DS0/api/DS0Player#IsLoaded","content":"&lt;/&gt; DS0Player.IsLoaded() → boolean Returns true if the player has been successfully initialized. "},{"title":"ServerDS0","type":0,"sectionRef":"#","url":"/DS0/api/ServerDS0","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#types","content":" "},{"title":"DS0ProcessValueCallback​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#DS0ProcessValueCallback","content":"&lt;/&gt; type DS0ProcessValueCallback = (value: any) → ( boolean, any ) Callback that receives the current value and returns a first boolean value, changed, and a second value  "},{"title":"DS0PlayerLoadedCallback​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#DS0PlayerLoadedCallback","content":"&lt;/&gt; type DS0PlayerLoadedCallback = ( Player: Player , DS0Player: DS0Player ) → () Called when a player has been successfully initialized and data can be read and written to it. "},{"title":"Properties​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#properties","content":" "},{"title":"DefaultsVersion​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#DefaultsVersion","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerDS0.DefaultsVersion: number A number that is appended to the datastore name. Defaults to 0  "},{"title":"MaxDataStoreRetries​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#MaxDataStoreRetries","content":"&lt;/&gt; ServerDS0.MaxDataStoreRetries: number Retries that will be done to get a datastore for a key if an error occurs. Defaults to 10  "},{"title":"MaxGetRetries​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#MaxGetRetries","content":"&lt;/&gt; ServerDS0.MaxGetRetries: number Retries that will be done to get a player's key from its datastore if an error occurs. Defaults to 5  "},{"title":"MaxSaveRetries​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#MaxSaveRetries","content":"&lt;/&gt; ServerDS0.MaxSaveRetries: number Retries that will be done to save a player's data if an error occurs. Defaults to 5 "},{"title":"Functions​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#functions","content":" "},{"title":"GetDataStore​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#GetDataStore","content":"&lt;/&gt; ServerDS0.GetDataStore(key: string) → nil | DataStore | OrderedDataStore  Returns the datastore that key is being saved to. Returns nil if key is ephimeral (DS0Default.Ephimeral = true) or is not in defaults.  "},{"title":"SavePlayer​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#SavePlayer","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerDS0.SavePlayer(Player: Player ) → () Saves Player's data into datastores. This should only be called after an important change in the player's data or periodically only if needed. This will round any non integers in an OrderedDataStore (DS0Default.Ordered = true), which will trigger a change event  "},{"title":"Init​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#Init","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerDS0.Init( defaults: DS0Defaults, version: number? ) → () Initializes DS0 with defaults for the player data and optionally a version (see ServerDS0.DefaultsVersion). This will also automatically get all connected and new player's data, and save a player's data once they leave the game. This should be called before any player is tried to get using ServerDS0.GetPlayer. This function should only be called once A key that is not in the defaults will not be recognized by DS0 and will warn if you try to set it for a player. To yield the current thread until the server is initialized, use ServerDS0.YieldUntilInit Example of initializing player defaults (see DS0Default): local PlayerDefaults = { -- Defaults to 0, and will be saved in an OrderedDataStore Wins = DS0.Default(0, true), -- Defaults to {} InventoryItems = DS0.Default({}), -- Defaults to 0 and will not be saved, -- therefore will reset when the player joins the game again TimeInGame = DS0.Default(0, false, true) } DS0.Server.Init(PlayerDefaults)   "},{"title":"YieldUntilInit​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#YieldUntilInit","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerDS0.YieldUntilInit() → () Yields the current thread until the server has successfully initialized. Beware when using in a ModuleScript, as yielding in the wrong places can lead to an infinite yield, so the responsabillity of ensuring whether the server has initialized should be delegated to whatever is calling the module.  "},{"title":"GetPlayer​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#GetPlayer","content":"&lt;/&gt; ServerDS0.GetPlayer(Player: Player ) → DS0Player Returns the DS0Player for Player Increment a player's Wins when a proximity prompt is triggered: proximityPrompt.Triggered:Connect(function(player) local ds0Player = DS0.Server.GetPlayer(player) ds0Player.Set(&quot;Wins&quot;, function(currentValue) return currentValue + 1 end) end)   "},{"title":"OnPlayerLoaded​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#OnPlayerLoaded","content":"&lt;/&gt; ServerDS0.OnPlayerLoaded(callback: DS0PlayerLoadedCallback) → CallbackRemover Adds an event listener to call callback when a new player has been successfully initialized and data can be read and written to it. DS0.Server.OnPlayerLoaded(function(player: Player, ds0Player: DS0.DS0Player) print(`{player.Name} has loaded and has {ds0Player.Get(&quot;Wins&quot;)} wins!`) end)   "},{"title":"ProcessInitialValue​","type":1,"pageTitle":"ServerDS0","url":"/DS0/api/ServerDS0#ProcessInitialValue","content":"&lt;/&gt; ServerDS0.ProcessInitialValue( key: string, callback: DS0ProcessValueCallback ) → CallbackRemover Sets a callback (that returns a first boolean value, changed, and a second value) to be called before key is initially replicated to the client and changes key to value if changed is true. It is important that changed is returned false if the value hasn't changed, or true if it has, in order for DS0 to know whether to save the value or not. This should ideally be called before ServerDS0.Init. The changed value will be saved to the datastores too. This is useful if processing of a value is needed before it's replicated to the client for the first time or initially retrieved. Removing items from an inventory that are considered deleted (0) to optimize the data: -- Items is an array of Item or 0 (deleted) DS0.Server.ProcessInitialValue(&quot;InventoryItems&quot;, function(items: {[number]: Item|0}) local changed = false local newItems = {} -- Filtering through the items, excluding the items that are 0 -- from being added into the new array for _,item in items do if item == 0 then -- We are changing the table by not adding an item -- that previously was in the table changed = true continue end table.insert(newItems, item) end return changed, newItems end)  "}]