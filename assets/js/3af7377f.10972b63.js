"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[180],{10552:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetPlayerKey","desc":"Returns the key of the player that will be saved on the datastores. Only useful if you\'re accessing the raw datastores","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"static","source":{"line":27,"path":"src/DS0.lua"}},{"name":"Default","desc":"Makes a [DS0Default] using the arguments provided","params":[{"name":"value","desc":"The default value of the key","lua_type":"any"},{"name":"ordered","desc":"Whether the value will be saved in an [OrderedDataStore]. Defaults to false, will be false if value is not a number","lua_type":"boolean|nil"},{"name":"ephimeral","desc":"Whether the value will be saved (false) or will disappear (true) when the player leaves the game. Defaults to false","lua_type":"boolean|nil"}],"returns":[{"desc":"","lua_type":"DS0Default"}],"function_type":"static","source":{"line":41,"path":"src/DS0.lua"}}],"properties":[{"name":"DataStoreName","desc":"The name that will be used for getting the datastores, is `nil` on client.","lua_type":"string | nil","realm":["Server"],"readonly":true,"source":{"line":109,"path":"src/DS0.lua"}},{"name":"Client","desc":"Client functions for DS0, is `nil` on server","lua_type":"ClientDS0 | nil","realm":["Client"],"source":{"line":839,"path":"src/DS0.lua"}},{"name":"Server","desc":"Server functions for DS0, is `nil` on client","lua_type":"ServerDS0 | nil","realm":["Server"],"source":{"line":846,"path":"src/DS0.lua"}}],"types":[{"name":"CallbackRemover","desc":"A function that when called will stop the callback from being called again","lua_type":"() -> ()","source":{"line":23,"path":"src/DS0.lua"}},{"name":"DS0Default","desc":"A default for a key. Making this interface manually can be verbose so using [DS0.Default] is recommended.","fields":[{"name":"Value","lua_type":"any","desc":"The default value of the key"},{"name":"Ordered","lua_type":"boolean","desc":"Whether the value will be saved in an [OrderedDataStore]"},{"name":"Ephimeral","lua_type":"boolean","desc":"Whether the value will be saved (false) or will reset (true) when the player leaves the game"}],"source":{"line":59,"path":"src/DS0.lua"}},{"name":"DS0Defaults","desc":"A dictionary of a default for each key in a player\'s data. A player\'s data will contain each key in here.\\n\\n*See [ServerDS0.Init]*","lua_type":"{[string]: DS0Default}","source":{"line":68,"path":"src/DS0.lua"}},{"name":"DS0SavedPlayer","desc":"A dictionary of the values that are contained in the player","lua_type":"{[string]: any}","source":{"line":75,"path":"src/DS0.lua"}},{"name":"DS0SavedPlayers","desc":"A dictionary mapping a player to its data","lua_type":"{[Player]: DS0SavedPlayer}","private":true,"source":{"line":82,"path":"src/DS0.lua"}},{"name":"DS0KeyChangedCallback","desc":"Callback that receives a new value that has changed","lua_type":"(newValue: any) -> ()","source":{"line":88,"path":"src/DS0.lua"}},{"name":"DS0SetCallback","desc":"Callback that receives the current value of the key and returns a new value for the key","lua_type":"(currentValue: any) -> any","source":{"line":94,"path":"src/DS0.lua"}},{"name":"DS0SetTable","desc":"A dictionary for setting multiple keys in one function call, value is a Set method argument","lua_type":"{[string]: any | DS0SetCallback}","source":{"line":100,"path":"src/DS0.lua"}}],"name":"DS0","desc":"DS0 is a datastore wrapper for saving and reading players data that replicates changes to the client.\\n\\nIncludes [DS0.Server] for working with players data and [DS0.Client] for working with the local player\'s data","source":{"line":16,"path":"src/DS0.lua"}}')}}]);